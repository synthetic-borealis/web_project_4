(()=>{"use strict";function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function t(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}const n=function(){function n(e){var r=this,o=e.baseUrl,i=e.headers;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,n),t(this,"likeCard",(function(e){return fetch("".concat(r._baseUrl,"/cards/likes/").concat(e),{method:"PUT",headers:r._headers}).then(r._handleResponse)})),t(this,"unlikeCard",(function(e){return fetch("".concat(r._baseUrl,"/cards/likes/").concat(e),{method:"DELETE",headers:r._headers}).then(r._handleResponse)})),t(this,"addCard",(function(e,t){return fetch("".concat(r._baseUrl,"/cards"),{method:"POST",headers:r._headers,body:JSON.stringify({name:e,link:t})}).then(r._handleResponse)})),t(this,"removeCard",(function(e){return fetch("".concat(r._baseUrl,"/cards/").concat(e),{method:"DELETE",headers:r._headers}).then(r._handleResponse)})),this._baseUrl=o,this._headers=i}var r,o;return r=n,(o=[{key:"_handleResponse",value:function(e){return e.ok?e.json():Promise.reject("Error: ".concat(e.status))}},{key:"getUserData",value:function(){return fetch("".concat(this._baseUrl,"/users/me"),{headers:this._headers}).then(this._handleResponse)}},{key:"updateUserInfo",value:function(e,t){return fetch("".concat(this._baseUrl,"/users/me"),{method:"PATCH",headers:this._headers,body:JSON.stringify({name:e,about:t})}).then(this._handleResponse)}},{key:"updateUserAvatar",value:function(e){return fetch("".concat(this._baseUrl,"/users/me/avatar"),{method:"PATCH",headers:this._headers,body:JSON.stringify({avatar:e})}).then(this._handleResponse)}},{key:"getInitialCards",value:function(){return fetch("".concat(this._baseUrl,"/cards"),{headers:this._headers}).then(this._handleResponse)}},{key:"getRemoteData",value:function(){return Promise.all([this.getUserData(),this.getInitialCards()])}}])&&e(r.prototype,o),n}();var r={formSelector:".form",inputSelector:".form__input",submitButtonSelector:".form__submit-btn",fieldsetSelector:".form__fieldset",errorSelector:".form__error",inactiveButtonClass:"form__submit-btn_disabled",inputErrorClass:"form__input_type_error",errorClass:"form__error_visible"},o="popup-section_opened",i=".card",a="card__like-button_active";function c(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var u=function(){function e(t){var n=this,r=t.data,o=t.cardSelector,c=t.handleCardClick,u=t.confirmPopup,l=t.api,f=t.userId;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),s(this,"updateLikeCounter",(function(){n._likeCounter.textContent=n._likes})),s(this,"_onClickLikeButton",(function(){n._isLiked?n._api.unlikeCard(n._id).then((function(){n._isLiked=!1,n._buttonLike.classList.remove(a),n._likes--,n.updateLikeCounter()})).catch((function(e){return console.log})):n._api.likeCard(n._id).then((function(){n._isLiked=!0,n._buttonLike.classList.add(a),n._likes++,n.updateLikeCounter()})).catch(console.log)})),s(this,"_onClickDeleteButton",(function(e){n._confirmPopup.setActionCallback((function(){n._api.removeCard(n._id).then((function(){e.target.closest(i).remove()})).catch(console.log)})),n._confirmPopup.open()})),s(this,"_onClickImage",(function(){n._handleCardClick({name:n._name,link:n._imageLink})})),this._name=r.name,this._imageLink=r.link,this._likes=r.likes.length,this._id=r._id,this._cardSelector=o,this._handleCardClick=c,this._confirmPopup=u,this._api=l,this._isLiked=r.likes.some((function(e){return e._id===f}))}var t,n;return t=e,(n=[{key:"_setEventListeners",value:function(){this._buttonLike.addEventListener("click",this._onClickLikeButton),this._buttonDelete.addEventListener("click",this._onClickDeleteButton),this._image.addEventListener("click",this._onClickImage)}},{key:"_getCardTemplate",value:function(){return document.querySelector(this._cardSelector)}},{key:"getCard",value:function(){return this._cardElement=this._getCardTemplate().content.querySelector(i).cloneNode(!0),this._buttonLike=this._cardElement.querySelector(".card__like-button"),this._buttonDelete=this._cardElement.querySelector(".card__delete-button"),this._image=this._cardElement.querySelector(".card__image"),this._caption=this._cardElement.querySelector(".card__caption"),this._likeCounter=this._cardElement.querySelector(".card__like-counter"),this._image.style.backgroundImage="url(".concat(this._imageLink,")"),this._image.ariaLabel=this._name,this._caption.textContent=this._name,this._likeCounter.textContent=this._likes,this._isLiked&&this._buttonLike.classList.add(a),this._setEventListeners(),this._cardElement}}])&&c(t.prototype,n),e}();const l=u;function f(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}const h=function(){function e(t,n){var r=t.items,o=t.renderer;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._items=r,this._renderer=o,this._container=document.querySelector(n)}var t,n;return t=e,(n=[{key:"addItem",value:function(e){this._container.prepend(e)}},{key:"_clear",value:function(){this._container.innerHTML=""}},{key:"renderItems",value:function(){this._clear(),this._items.forEach(this._renderer)}}])&&f(t.prototype,n),e}();function d(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function p(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}const _=function(){function e(t){var n=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),p(this,"_handleEscClose",(function(e){"Escape"===e.key&&n.close()})),p(this,"_handlePopupClick",(function(e){(e.target.classList.contains("close-button")||e.target===e.currentTarget)&&n.close()})),p(this,"open",(function(){document.addEventListener("keydown",n._handleEscClose),n._container.classList.add(o)})),this._container=document.querySelector(t)}var t,n;return t=e,(n=[{key:"close",value:function(){document.removeEventListener("keydown",this._handleEscClose),this._container.classList.remove(o)}},{key:"setEventListeners",value:function(){this._container.addEventListener("click",this._handlePopupClick)}}])&&d(t.prototype,n),e}();function y(e){return y="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},y(e)}function m(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function v(e,t){return v=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},v(e,t)}function b(e,t){if(t&&("object"===y(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}function k(e){return k=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},k(e)}const g=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&v(e,t)}(a,e);var t,n,r,o,i=(r=a,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=k(r);if(o){var n=k(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return b(this,e)});function a(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,a),(t=i.call(this,e))._image=t._container.querySelector(".image-popup__image"),t._caption=t._container.querySelector(".image-popup__caption"),t}return t=a,(n=[{key:"updateContent",value:function(e){this._image.src=e.link,this._image.alt=e.name,this._caption.textContent=e.name}}])&&m(t.prototype,n),a}(_);function C(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}const E=function(){function e(t,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._formClasses=t,this._formElement=n}var t,n;return t=e,(n=[{key:"_showInputError",value:function(e,t,n){var r=e.querySelector(".".concat(t.id,"-error"));t.classList.add(this._formClasses.inputErrorClass),r.textContent=n,r.classList.add(this._formClasses.errorClass)}},{key:"_hideInputError",value:function(e,t){var n=e.querySelector(".".concat(t.id,"-error"));t.classList.remove(this._formClasses.inputErrorClass),n.textContent="",n.classList.remove(this._formClasses.errorClass)}},{key:"_checkInputValidity",value:function(e,t){t.validity.valid?this._hideInputError(e,t):this._showInputError(e,t,t.validationMessage)}},{key:"_hasInvalidInput",value:function(e){return e.some((function(e){return!e.validity.valid}))}},{key:"_toggleButtonState",value:function(e,t){this._hasInvalidInput(e)?t.classList.add(this._formClasses.inactiveButtonClass):t.classList.remove(this._formClasses.inactiveButtonClass)}},{key:"_ignoreEnterKey",value:function(e,t){"Enter"===e.key&&this._hasInvalidInput(t)&&e.preventDefault()}},{key:"_setValidationEventListeners",value:function(e,t){var n=this,r=Array.from(e.querySelectorAll(this._formClasses.inputSelector));this._toggleButtonState(r,t),e.addEventListener("keydown",(function(e){return n._ignoreEnterKey(e,r)})),r.forEach((function(o){o.addEventListener("input",(function(){n._checkInputValidity(e,o),n._toggleButtonState(r,t)}))}))}},{key:"_setFormValidation",value:function(e){var t=this,n=Array.from(e.querySelectorAll(this._formClasses.fieldsetSelector)),r=e.querySelector(this._formClasses.submitButtonSelector);n.forEach((function(e){return t._setValidationEventListeners(e,r)}))}},{key:"resetFormValidation",value:function(){var e=this,t=Array.from(this._formElement.querySelectorAll(this._formClasses.fieldsetSelector)),n=this._formElement.querySelector(this._formClasses.submitButtonSelector);t.forEach((function(t){var r=Array.from(t.querySelectorAll(e._formClasses.inputSelector));r.forEach((function(t){e._hideInputError(e._formElement,t),e._toggleButtonState(r,n)}))}))}},{key:"enableValidation",value:function(){this._setFormValidation(this._formElement)}}])&&C(t.prototype,n),e}();function S(e){return S="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},S(e)}function w(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function L(e,t,n){return L="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=P(e)););return e}(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(n):o.value}},L(e,t,n||e)}function O(e,t){return O=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},O(e,t)}function j(e,t){if(t&&("object"===S(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}function P(e){return P=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},P(e)}const I=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&O(e,t)}(c,e);var t,n,o,i,a=(o=c,i=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=P(o);if(i){var n=P(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return j(this,e)});function c(e,t){var n;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,c),(n=a.call(this,t))._form=n._container.querySelector(r.formSelector),n._formValidator=new E(r,n._form),n._onSubmit=e,n._inputList=n._form.querySelectorAll(r.inputSelector),n._formValidator.enableValidation(),n}return t=c,(n=[{key:"_getInputValues",value:function(){var e={};return this._inputList.forEach((function(t){e[t.name]=t.value})),e}},{key:"resetFormValidation",value:function(){this._formValidator.resetFormValidation()}},{key:"resetForm",value:function(){this._form.reset()}},{key:"close",value:function(){L(P(c.prototype),"close",this).call(this),this.resetForm(),this.resetFormValidation()}},{key:"setEventListeners",value:function(){var e=this;L(P(c.prototype),"setEventListeners",this).call(this),this._form.addEventListener("submit",(function(t){t.preventDefault();var n=e._getInputValues();e._onSubmit(n)}))}}])&&w(t.prototype,n),c}(_);function R(e){return R="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},R(e)}function T(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function q(e,t,n){return q="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=A(e)););return e}(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(n):o.value}},q(e,t,n||e)}function x(e,t){return x=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},x(e,t)}function U(e,t){if(t&&("object"===R(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return B(e)}function B(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function A(e){return A=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},A(e)}const V=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&x(e,t)}(c,e);var t,n,o,i,a=(o=c,i=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=A(o);if(i){var n=A(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return U(this,e)});function c(e){var t,n,o,i;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,c),i=function(){"function"==typeof t._actionCallback&&t._actionCallback(),t.close()},(o="_handleConfirm")in(n=B(t=a.call(this,e)))?Object.defineProperty(n,o,{value:i,enumerable:!0,configurable:!0,writable:!0}):n[o]=i,t._actionCallback=null,t._confirmButton=t._container.querySelector(r.submitButtonSelector),t}return t=c,(n=[{key:"setActionCallback",value:function(e){this._actionCallback=e}},{key:"close",value:function(){this._actionCallback=null,q(A(c.prototype),"close",this).call(this)}},{key:"setEventListeners",value:function(){q(A(c.prototype),"setEventListeners",this).call(this),this._confirmButton.addEventListener("click",this._handleConfirm)}}])&&T(t.prototype,n),c}(_);function D(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}const F=function(){function e(t,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._nameTextElement=document.querySelector(t),this._jobTextElement=document.querySelector(n)}var t,n;return t=e,(n=[{key:"getUserInfo",value:function(){return{name:this._nameTextElement.textContent,job:this._jobTextElement.textContent}}},{key:"setUserInfo",value:function(e){var t=e.name,n=e.job;this._nameTextElement.textContent=t,this._jobTextElement.textContent=n}}])&&D(t.prototype,n),e}();function N(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var H=new n({baseUrl:"https://around.nomoreparties.co/v1/group-12",headers:{authorization:"d93b3a72-c2aa-468d-b021-56b5e633ed52","Content-Type":"application/json"}});H.getRemoteData().then((function(e){var t,n,r=(n=2,function(e){if(Array.isArray(e))return e}(t=e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,i=[],a=!0,c=!1;try{for(n=n.call(e);!(a=(r=n.next()).done)&&(i.push(r.value),!t||i.length!==t);a=!0);}catch(e){c=!0,o=e}finally{try{a||null==n.return||n.return()}finally{if(c)throw o}}return i}}(t,n)||function(e,t){if(e){if("string"==typeof e)return N(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?N(e,t):void 0}}(t,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),o=r[0],i=r[1],a=document.querySelector(".form_type_edit"),c=document.querySelector(".profile__edit-button"),s=document.querySelector("#btn-profile-save"),u=document.querySelector("#btn-change-avatar"),f=document.querySelector("#btn-save-avatar"),d=document.querySelector(".add-button"),p=document.querySelector("#btn-add-submit"),_=a.elements.namedItem("profile-name-input"),y=a.elements.namedItem("profile-job-input"),m=document.querySelector(".profile__avatar");function v(e){m.src=e,m.style.backgroundImage="url(".concat(e,")"),m.ariaLabel=o.name}v(o.avatar);var b=new F(".profile__name",".profile__job");b.setUserInfo({name:o.name,job:o.about});var k=new V(".popup-section_type_confirm");function C(e){return new l({data:e,cardSelector:"#card-template",handleCardClick:function(){E.updateContent(e),E.open()},api:H,userId:o._id,confirmPopup:k}).getCard()}k.setEventListeners();var E=new g(".popup-section_type_image");function S(e){_.value=e.name,y.value=e.job}E.setEventListeners();var w=new I((function(e){s.textContent="Saving...",H.updateUserInfo(e.name,e.job).then((function(){b.setUserInfo(e),S(b.getUserInfo())})).catch(console.log).finally((function(){s.textContent="Save",w.close()}))}),".popup-section_type_edit");w.setEventListeners();var L=new I((function(e){p.textContent="Creating...",H.addCard(e.title,e.link).then((function(e){var t=C(e);j.addItem(t)})).catch(console.log).finally((function(){p.textContent="Create",L.close()}))}),".popup-section_type_add");L.setEventListeners();var O=new I((function(e){console.log(e),f.textContent="Saving...",H.updateUserAvatar(e.avatar).then((function(){v(avatar)})).catch(console.log).finally((function(){f.textContent="Save",O.close()}))}),".popup-section_type_change-avatar");O.setEventListeners();var j=new h({items:i.reverse(),renderer:function(e){var t=C(e);j.addItem(t)}},".places");j.renderItems(),c.addEventListener("click",(function(){S(b.getUserInfo()),w.resetFormValidation(),w.open()})),d.addEventListener("click",L.open),u.addEventListener("click",O.open)})).catch(console.log)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,